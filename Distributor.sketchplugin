var app = [NSApplication sharedApplication];
var selection = context.selection;
var command = context.command;
var doc = context.doc;
var page = [doc currentPage];

var DEFAULT_SPACING = 10;
var saved_spacing = null;
var DEFAULT_DIMENSION = 0;
var saved_dimension = null;

try {
    saved_spacing = [command valueForKey:"distributorSpacing" onLayer:page];
    saved_dimension = [command valueForKey:"distributorDimension" onLayer:page];
}
catch (err) {
    log("Failed fetching cashed values, layer commands not supported?");
}
if (saved_spacing == null) {
    saved_spacing = DEFAULT_SPACING;
}
if (saved_dimension == null || (saved_dimension != 0 && saved_dimension != 1)) {
    saved_dimension = DEFAULT_DIMENSION;
}

function sortedArray(arr, sortDescriptorKey) {
  var sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:sortDescriptorKey ascending:1];
  var sorted = [arr sortedArrayUsingDescriptors:[sortDescriptor]];
  return sorted;
}

function createLabel(text, frame) {
  var label = [[NSTextField alloc] initWithFrame:frame];
  [label setStringValue:text];
  [label setFont:[NSFont boldSystemFontOfSize:12]];
  [label setBezeled:false];
  [label setDrawsBackground:false];
  [label setEditable:false];
  [label setSelectable:false];
  return label;
}

function createChoices(msg) {
  var viewBox = [[NSBox alloc] initWithFrame:NSMakeRect(0, 0, 0, 0)];
  [viewBox setTitle:""];

  [viewBox addSubview:createLabel("Direction:", NSMakeRect(0,85,300, 20))];

  var prototype = [[NSButtonCell alloc] init];
  [prototype setButtonType:NSRadioButton];
  [prototype setTitle:"---------------------------------------------"];
  var dimensionChoices = [[NSMatrix alloc] initWithFrame:NSMakeRect(0, 45, 300, 40)
    mode:NSRadioModeMatrix
    prototype:prototype
    numberOfRows:2
    numberOfColumns:1];
  var cellArray = [dimensionChoices cells];
  [[cellArray objectAtIndex:0] setTitle:"Vertically"];
  [[cellArray objectAtIndex:1] setTitle:"Horizontally"];
  [dimensionChoices selectCellAtRow:saved_dimension column:0];
  [viewBox addSubview:dimensionChoices];

  [viewBox addSubview:createLabel("Spacing:", NSMakeRect(0, 20, 300, 20))];

  var spacingField = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 0, 100, 20)];
  [spacingField setStringValue:saved_spacing];
  [viewBox addSubview:spacingField];

  [viewBox sizeToFit];

  var alert = [[NSAlert alloc] init];
  [alert setMessageText:msg];
  [alert addButtonWithTitle:"OK"];
  [alert addButtonWithTitle:"Cancel"];
  [alert setAccessoryView:viewBox];

  var responseCode = [alert runModal];

  var dimension = [[dimensionChoices selectedCell] title];
  return [responseCode, dimension, [spacingField stringValue]];
}

if ([selection count] > 0) {
  var choices = createChoices('Distribute ' + [selection count] + ' objects'),
      buttonChoice = choices[0] == 1000 ? "OK" : "Cancel",
      dimension = choices[1],
      spacingString = choices[2],
      formatter = [[NSNumberFormatter alloc] init];
      spacing = null;

  if (buttonChoice === "OK") {
    var sortedByLeft  = sortedArray(selection, "frame.left"),
        sortedByTop   = sortedArray(selection, "frame.top"),
        firstLeft     = sortedByLeft[0],
        firstTop      = sortedByTop[0],
        left          = [[firstLeft frame] left],
        top           = [[firstTop frame] top];

    spacing = [formatter numberFromString:spacingString];
    if (spacing != null) {
        if (String(dimension) === "Vertically") {
            var loopV = [sortedByTop objectEnumerator];
            while (layer = [loopV nextObject]) {
                [[layer frame] setTop:top];
                top = [[layer frame] top] + [[layer frame] height] + spacing;
            });
        }
        else {
            var loopH = [sortedByLeft objectEnumerator];
            while (layer = [loopH nextObject]) {
                [[layer frame] setLeft:left];
                left = [[layer frame] left] + [[layer frame] width] + spacing;
            });
        }
    }
    else {
        log("Wrong number format for spacing: " + spacingString);
        [app displayDialog:("Wrong number format for spacing: " + spacingString) withTitle:"Distributor is sad"];
    }
    
    try {
        [command setValue:spacingString forKey:"distributorSpacing" onLayer:page];
        [command setValue:(String(dimension) === "Horizontally" ? 1 : 0) forKey:"distributorDimension" onLayer:page];
    }
    catch (err) {
        log("Failed saving values, layer commands not supported?");
    }
  }
}
else {
  log("No selection to distribute");
  [app displayDialog:"No selection, no fun." withTitle:"Distributor is sad"];
}
